#version 450 core

in vec2 textureCoords;
in vec4 clipSpace;

out vec4 out_Color;

uniform sampler2D fboTextureReflection;
uniform sampler2D fboTextureRefraction;

void main() {
    vec3 viewDirection = normalize(vec3(clipSpace.xy / clipSpace.w - vec2(0.5, 0.5), 1.0));

    // Calculate normalized device coordinates (NDC)
    vec2 ndc = (clipSpace.xy / clipSpace.w) / 2.0 + 0.5;

    // Use NDC for both reflection and refraction texture coordinates
    vec2 refractTexCoords = vec2(ndc.x, ndc.y);
    vec2 reflectTexCoords =  vec2(ndc.x, ndc.y); 
   reflectTexCoords.y = 1.0 - reflectTexCoords.y;
    vec4 reflectionColor = texture(fboTextureReflection, reflectTexCoords);
    vec4 refractionColor = texture(fboTextureRefraction, refractTexCoords);

    // Adjust blending factors for reflection and water tint
    vec3 waterColor = vec3(0.1, 0.53, 0.96);
    vec3 finalColor = mix(reflectionColor.rgb, refractionColor.rgb, 0.5);
  finalColor = mix(finalColor, waterColor, 0.33);

    // Output the final color
 out_Color = vec4(finalColor, 1.0);
}
